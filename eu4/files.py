import ClauseWizard as cw
import csv
import enum
import json

from typing import Any

type Item = Value | list[Value] | Scope
type Value = str | int | float | bool

# Contains generic classes which can be extended to represent specific types of files
# They can also be used as-is to represent files "anonymously"


# An ordered list of key-item pairs where keys do not have to be unique
class Scope:
    scope: list[tuple[str, Item]]
    def __init__(self):
        self.scope = []
    
    def __iter__(self):
        return iter(self.scope)
    
    def getAll(self, key: str) -> list[Any]:
        '''
        Returns a list of all items with the given key, in order of appearance. If the key is not found, an
        empty list is returned.
        '''
        return [v for k, v in self if k == key]
    
    def _get(self, key: str) -> Any | None:
        '''
        Returns the last item with the given key. If the key is not found, None is returned.
        '''
        result = self.getAll(key)
        return result[-1] if result else None
    
    def getConst(self, key: str, default: Any = "") -> Any:
        '''
        Returns the last item with the given key. If the key is not found or the item is not a constant (str,
        int, float or bool), the default value is returned.
        '''
        result = self._get(key)
        if result == "":
            return ""
        if result is None or type(result) is list or type(result) is Scope:
            return default
        return result
    
    def getArray(self, key: str, default: Any = "") -> list[Any]:
        '''
        Returns the last item with the given key. If the key is not found or the item is not an array, the
        default value is returned.
        '''
        result = self._get(key)
        if result == "":
            return []
        if result is None or type(result) is not list:
            return default
        return result
    
    def getScope(self, key: str, default: Any = "") -> "Scope":
        '''
        Returns the last item with the given key. If the key is not found or the item is not a scope, the
        default value is returned.
        '''
        result = self._get(key)
        if result == "":
            return Scope()
        if result is None or type(result) is not Scope:
            return default
        return result

    def append(self, key: str, item: Item):
        self.scope.append((key, item))

# Generic scope file object
class ScopeFile:
    scope: Scope
    def __init__(self, path: str):
        with open(path, 'r', encoding="cp1252") as file:
            text = file.read()
        try:
            tokens = cw.cwparse(text)
        # If the parsing fails, ClauseWizard raises a pyparsing.exceptions.ParseException.
        # We catch it and raise a ValueError with a more informative message.
        except Exception as parseException:
            raise ValueError(f"Failed to parse scope file '{path}'") from parseException
        self.scope = _parseTokens(tokens)

# Parse the tokens generated by cw.cwparse into a Scope
def _parseTokens(tokens: list[tuple[str, list]]) -> Scope:
    scope = Scope()
    # Item tokens can either be:
    # - a constant (singleton list of a value)
    # - an array (list of singleton lists of values)
    # - a scope (list of string-list pairs)
    # - empty (list with a single empty string)
    # Values can be strings, ints, floats or booleans
    for key, item in tokens:
        # empty
        if not item[0]:
            scope.append(key, "")
        # constant
        elif not isinstance(item[0], list):
            scope.append(key, item[0])
        # array
        elif len(item[0]) == 1:
            scope.append(key, [subitem[0] for subitem in item])
        # scope
        elif len(item[0]) == 2:
            scope.append(key, _parseTokens(item))
        # invalid
        else:
            raise ValueError(f"Invalid item: {item}")
    return scope


class JsonFile:
    json: dict
    def __init__(self, path: str):
        with open(path, 'r') as file:
            self.json = json.load(file)
        
    def __getitem__(self, key: str) -> Any:
        return self.json[key]


class CsvFile:
    csv: list[list[str]]
    def __init__(self, path: str):
        with open(path, 'r', encoding="cp1252", errors="ignore") as file:
            self.csv = [row for row in csv.reader(file, delimiter=';', quotechar=None)]
        self.csv.pop(0)
    
    def __iter__(self):
        return iter(self.csv)


# Enum that represents all values not part of the enum as None
class NoneEnum(enum.Enum):
    @classmethod
    def _missing_(cls, _) -> Any:
        return cls(None)
